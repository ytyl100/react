{
    "version": 3,
    "sources": [
        "components/FileUploader.js",
        "pages/forms/FileUpload.js",
        "components/PageTitle.js"
    ],
    "names": [
        "FileUploader",
        "Component",
        "constructor",
        "props",
        "super",
        "handleAcceptedFiles",
        "files",
        "allFiles",
        "this",
        "showPreview",
        "map",
        "file",
        "Object",
        "assign",
        "preview",
        "split",
        "URL",
        "createObjectURL",
        "formattedSize",
        "formatBytes",
        "size",
        "state",
        "selectedFiles",
        "push",
        "setState",
        "onFileUpload",
        "bytes",
        "decimals",
        "dm",
        "i",
        "Math",
        "floor",
        "log",
        "parseFloat",
        "pow",
        "toFixed",
        "bind",
        "render",
        "React",
        "createElement",
        "Fragment",
        "Dropzone",
        "onDrop",
        "acceptedFiles",
        "_ref",
        "getRootProps",
        "getInputProps",
        "className",
        "id",
        "f",
        "Card",
        "key",
        "Row",
        "Col",
        "data-dz-thumbnail",
        "alt",
        "name",
        "src",
        "type",
        "Link",
        "to",
        "defaultProps",
        "FileUpload",
        "md",
        "PageTitle",
        "breadCrumbItems",
        "label",
        "path",
        "active",
        "title",
        "CardBody",
        "console",
        "items",
        "Breadcrumb",
        "BreadcrumbItem",
        "item",
        "index"
    ],
    "mappings": "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",
    "file": "static/js/79.6143f14e.chunk.js",
    "sourcesContent": [
        "import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Row, Col, Card } from 'reactstrap';\nimport Dropzone from 'react-dropzone';\n\n\nclass FileUploader extends Component {\n    static defaultProps = {\n        showPreview: true,\n    };\n\n    constructor(props) {\n        super(props);\n        this.handleAcceptedFiles = this.handleAcceptedFiles.bind(this);\n\n        this.state = {\n            selectedFiles: [],\n        };\n    }\n\n    /**\n     * Handled the accepted files and shows the preview\n     */\n    handleAcceptedFiles = (files) => {\n        var allFiles = files;\n\n        if (this.props.showPreview) {\n            files.map(file =>\n                Object.assign(file, {\n                    preview: file['type'].split('/')[0] === 'image' ? URL.createObjectURL(file) : null,\n                    formattedSize: this.formatBytes(file.size),\n                })\n            );\n\n            allFiles = this.state.selectedFiles;\n            allFiles.push(...files);\n            this.setState({ selectedFiles: allFiles });\n        }\n\n        if (this.props.onFileUpload) this.props.onFileUpload(allFiles);\n    };\n\n    /**\n     * Formats the size\n     */\n    formatBytes = (bytes, decimals) => {\n        if (bytes === 0) return '0 Bytes';\n        const k = 1024;\n        const dm = decimals < 0 ? 0 : decimals;\n        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n    };\n\n    render() {\n        return (\n            <React.Fragment>\n                <Dropzone onDrop={acceptedFiles => this.handleAcceptedFiles(acceptedFiles)} {...this.props}>\n                    {({ getRootProps, getInputProps }) => (\n                        <div className=\"dropzone text-center\">\n                            <div className=\"dz-message py-5 needsclick\" {...getRootProps()}>\n                                <input {...getInputProps()} />\n                                <i className=\"h1 text-muted uil-cloud-upload\"></i>\n                                <h3>Drop files here or click to upload.</h3>\n                                <span className=\"text-muted font-13\">\n                                    (This is just a demo dropzone. Selected files are <strong>not</strong> actually\n                                    uploaded.)\n                                </span>\n                            </div>\n                        </div>\n                    )}\n                </Dropzone>\n\n                {this.props.showPreview && (\n                    <div className=\"dropzone-previews mt-3\" id=\"file-previews\">\n                        {this.state.selectedFiles.map((f, i) => {\n                            return (\n                                <Card\n                                    className=\"mt-1 mb-0 shadow-none border dz-processing dz-image-preview dz-success dz-complete\"\n                                    key={i + '-file'}>\n                                    <div className=\"p-2\">\n                                        <Row className=\"align-items-center\">\n                                            {f.preview && (\n                                                <Col className=\"col-auto\">\n                                                    <img\n                                                        data-dz-thumbnail=\"\"\n                                                        className=\"avatar-sm rounded bg-light\"\n                                                        alt={f.name}\n                                                        src={f.preview}\n                                                    />\n                                                </Col>\n                                            )}\n                                            {!f.preview && (\n                                                <Col className=\"col-auto\">\n                                                    <div className=\"avatar-sm\">\n                                                        <span className=\"avatar-title bg-primary rounded\">\n                                                            {f.type.split('/')[0]}\n                                                        </span>\n                                                    </div>\n                                                </Col>\n                                            )}\n                                            <Col className=\"pl-0\">\n                                                <Link to=\"#\" className=\"text-muted font-weight-bold\">\n                                                    {f.name}\n                                                </Link>\n                                                <p className=\"mb-0\">\n                                                    <strong>{f.formattedSize}</strong>\n                                                </p>\n                                            </Col>\n                                        </Row>\n                                    </div>\n                                </Card>\n                            );\n                        })}\n                    </div>\n                )}\n            </React.Fragment>\n        );\n    }\n}\n\nexport default FileUploader;\n",
        "import React from 'react';\nimport { Row, Col, Card, CardBody } from 'reactstrap';\n\nimport PageTitle from '../../components/PageTitle';\nimport FileUploader from '../../components/FileUploader';\n\nconst FileUpload = () => {\n    return (\n        <React.Fragment>\n            <Row className=\"page-title\">\n                <Col md={12}>\n                    <PageTitle\n                        breadCrumbItems={[\n                            { label: 'Forms', path: '/forms/upload' },\n                            { label: 'File Upload', path: '/forms/upload', active: true },\n                        ]}\n                        title={'File Upload'}\n                    />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col>\n                    <Card>\n                        <CardBody>\n                            <h4 className=\"header-title mt-0 mb-1\">Dropzone File Upload</h4>\n                            <p className=\"sub-header\">DropzoneJS is an open source library that provides drag and drop file uploads with image previews.</p>\n\n                            <FileUploader\n                                onFileUpload={files => {\n                                    console.log(files);\n                                }}\n                            />\n                        </CardBody>\n                    </Card>\n                </Col>\n            </Row>\n        </React.Fragment>\n    );\n};\n\nexport default FileUpload;\n",
        "import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Breadcrumb, BreadcrumbItem } from 'reactstrap';\n\n/**\n * Renders the PageTitle\n */\nconst PageTitle = (props) => {\n    const title = props.title || \"\";\n    const items = props.breadCrumbItems || \"\";\n    return (\n        <React.Fragment>\n            \n            <Breadcrumb className=\"float-right mt-1 font-size-14\">\n                <BreadcrumbItem>\n                    <Link to=\"/\">xiahe</Link>\n                </BreadcrumbItem>\n                {items.map((item, index) => {\n                    return item.active ? (\n                        <BreadcrumbItem active key={index}>\n                            {item.label}\n                        </BreadcrumbItem>\n                    ) : (\n                            <BreadcrumbItem key={index}>\n                                <Link to={item.path}>{item.label}</Link>\n                            </BreadcrumbItem>\n                        );\n                })}\n            </Breadcrumb>\n\n            <h4 className=\"mb-1 mt-0\">{title}</h4>\n        </React.Fragment>\n    )\n}\n\nexport default PageTitle;"
    ],
    "sourceRoot": ""
}
